apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "redis-cluster.fullname" . }}
  labels:
    app: redis-cluster
data:
  fix-ip.sh: |
    #!/bin/sh
    CLUSTER_CONFIG="/data/nodes.conf"
    if [ -f ${CLUSTER_CONFIG} ]; then
      if [ -z "${POD_IP}" ]; then
        echo "Unable to determine Pod IP address!"
        exit 1
      fi
      echo "Updating my IP to ${POD_IP} in ${CLUSTER_CONFIG}"
      sed -i.bak -e "/myself/ s/[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}/${POD_IP}/" ${CLUSTER_CONFIG}
    fi
    exec "$@"
  redis.conf: |+
    cluster-enabled yes
    cluster-require-full-coverage no
    cluster-node-timeout 15000
    cluster-config-file /data/nodes.conf
    cluster-migration-barrier 1
    maxmemory 2000mb
    maxmemory-policy volatile-lru
    maxmemory-samples 10
    loglevel notice
    logfile "/data/redis.log"
    appendonly yes
    protected-mode no
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "redis-cluster.fullname" . }}
  labels:
    app: redis-cluster
spec:
  ports:
  - port: {{ .Values.redisService.port }}
    targetPort: 6379
    name: client
  - port: {{ .Values.exporterService.port }}
    targetPort: 16379
    name: gossip
  selector:
    app: redis-cluster
  type: {{ .Values.redisService.type }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "redis-cluster.fullname" . }}
  labels:
    app: redis-cluster
spec:
  serviceName: redis-cluster
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9121'
    spec:
      {{- if eq .Values.securityContext.enabled "true" }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: "{{ .Values.master.priorityClassName }}"
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      {{- if .Values.schedulerName }}
      schedulerName: "{{ .Values.schedulerName }}"
      {{- end }}
      containers:
      - image: oliver006/redis_exporter:latest
        name: redis-exporter
        ports:
        - containerPort: 9121
          protocol: TCP
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
      - name: redis
        image: redis:5.0.0
        ports:
        - containerPort: 6379
          name: client
        - containerPort: 16379
          name: gossip
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        command: ["/conf/fix-ip.sh", "redis-server", "/conf/redis.conf"]
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -h $(hostname) ping"
          initialDelaySeconds: 15
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -h $(hostname) ping"
          initialDelaySeconds: 20
          periodSeconds: 3
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: conf
          mountPath: /conf
          readOnly: false
        - name: data
          mountPath: /data
          readOnly: false
      volumes:
      - name: conf
        configMap:
          name: redis-cluster
          defaultMode: 0755

      
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        name: redis-cluster
    spec:
      storageClassName: {{ .Values.storageClassName }} 
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1000Mi
